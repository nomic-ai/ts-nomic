{
  "openapi": "3.0.2",
  "info": {
    "title": "Atlas API",
    "description": "Nomic Atlas API",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/health/": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "description": "Runs a health check on this instance of the API.",
        "operationId": "health_check_v1_health__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/v1/organization/{organization_id_or_slug}": {
      "get": {
        "tags": ["Organization"],
        "summary": "Fetch Organization",
        "description": "Fetches all details about an organization.\nPresents limited amounts of information based on the user's affiliation with the organization.\nPagination with limit and offset parameters",
        "operationId": "fetch_organization_v1_organization__organization_id_or_slug__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Id Or Slug", "type": "string" },
            "name": "organization_id_or_slug",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset Number",
              "type": "integer",
              "default": 0
            },
            "name": "offset_number",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "title": "Limit", "type": "integer" },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Fetch Organization V1 Organization  Organization Id Or Slug  Get",
                  "anyOf": [
                    { "$ref": "#/components/schemas/Organization" },
                    {
                      "$ref": "#/components/schemas/PublicOrganizationResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/{organization_id_or_slug}/usage": {
      "get": {
        "tags": ["Organization"],
        "summary": "Fetch Organization Usage",
        "description": "Computes the organization usage in the past 1 month.\n\nsince_last_billing_date: If True and organization is on a paid tier, only returns usage after the last billing date.",
        "operationId": "fetch_organization_usage_v1_organization__organization_id_or_slug__usage_get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Id Or Slug", "type": "string" },
            "name": "organization_id_or_slug",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Since Last Billing Date",
              "type": "boolean",
              "default": true
            },
            "name": "since_last_billing_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset Number",
              "type": "integer",
              "default": 0
            },
            "name": "offset_number",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "title": "Limit", "type": "integer" },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AtlasUsageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/search/{organization_nickname_or_slug}": {
      "get": {
        "tags": ["Organization"],
        "summary": "Fetch Organization Id By Nickname",
        "description": "Fetches all details about an organization.\nPresents limited amounts of information based on the user's affiliation with the organization.",
        "operationId": "fetch_organization_id_by_nickname_v1_organization_search__organization_nickname_or_slug__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Nickname Or Slug" },
            "name": "organization_nickname_or_slug",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "title": "Slug", "type": "boolean", "default": false },
            "name": "slug",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIDResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/v1/organization/rename": {
      "post": {
        "tags": ["Organization"],
        "summary": "Update Organization",
        "description": "Changes the organization nickname given the organization ID",
        "operationId": "update_organization_v1_organization_rename_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/update": {
      "post": {
        "tags": ["Organization"],
        "summary": "Update Organization",
        "description": "Changes the organization nickname given the organization ID",
        "operationId": "update_organization_v1_organization_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/create": {
      "post": {
        "tags": ["Organization"],
        "summary": "Create Organization",
        "description": "Creates an organization on the free tier and sets the owner to the user sending the request.",
        "operationId": "create_organization_v1_organization_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/members/add": {
      "post": {
        "tags": ["Organization"],
        "summary": "Add User",
        "description": "Adds a user to an organization",
        "operationId": "add_user_v1_organization_members_add_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddUserRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/members/remove": {
      "post": {
        "tags": ["Organization"],
        "summary": "Remove User",
        "description": "Removes a user from an organization.",
        "operationId": "remove_user_v1_organization_members_remove_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RemoveUserRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/members/modify": {
      "post": {
        "tags": ["Organization"],
        "summary": "Modify User",
        "description": "Modifies a user in an organization",
        "operationId": "modify_user_v1_organization_members_modify_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ModifyUserRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/member/invite": {
      "post": {
        "tags": ["Organization"],
        "summary": "Invite Member In Organization",
        "description": "Invites a user in an organization",
        "operationId": "invite_member_in_organization_v1_organization_member_invite_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InviteUserRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/invitations": {
      "post": {
        "tags": ["Organization"],
        "summary": "Get Organization Invitations",
        "description": "Get organization invitations for user",
        "operationId": "get_organization_invitations_v1_organization_invitations_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvitationsResponse" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/invitation/status": {
      "post": {
        "tags": ["Organization"],
        "summary": "Update Invitation Status",
        "description": "Accept or reject invitation",
        "operationId": "update_invitation_status_v1_organization_invitation_status_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateInviteRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/search": {
      "post": {
        "tags": ["Organization"],
        "summary": "Search User",
        "description": "Search user by nickname who is not already in organization",
        "operationId": "search_user_v1_organization_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SearchUserRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SearchUserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/v1/organization/invitations/pending": {
      "post": {
        "tags": ["Organization"],
        "summary": "Get Organization Pending Invitations",
        "description": "Get organization pending invitations",
        "operationId": "get_organization_pending_invitations_v1_organization_invitations_pending_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PendingInvitationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationsPendingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/organization/invitations/delete": {
      "post": {
        "tags": ["Organization"],
        "summary": "Remove Pending Invitation",
        "description": "Delete pending invitation",
        "operationId": "remove_pending_invitation_v1_organization_invitations_delete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePendingInvitationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/user/": {
      "get": {
        "tags": ["User"],
        "summary": "Fetch Current User",
        "operationId": "fetch_current_user_v1_user__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PrivateUser" }
              }
            }
          }
        },
        "security": [
          { "Auth0ImplicitBearer": [] },
          { "Auth0HTTPBearer": [] },
          { "OAuth2PasswordBearer": [] }
        ]
      }
    },
    "/v1/user/authorization/keys/{organization_id}/create": {
      "post": {
        "tags": ["User"],
        "summary": "Create Api Key",
        "operationId": "create_api_key_v1_user_authorization_keys__organization_id__create_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Id", "type": "string" },
            "name": "organization_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/APIKeyCreationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyCreationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/user/authorization/keys/{organization_id}/delete": {
      "post": {
        "tags": ["User"],
        "summary": "Delete Api Key",
        "operationId": "delete_api_key_v1_user_authorization_keys__organization_id__delete_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Id", "type": "string" },
            "name": "organization_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/APIKeyDeletionRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/user/authorization/keys/{organization_id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get Api Keys",
        "operationId": "get_api_keys_v1_user_authorization_keys__organization_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Id", "type": "string" },
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIKeyListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/user/token": {
      "post": {
        "tags": ["User"],
        "summary": "Auth0 Obtain Token From Code",
        "operationId": "auth0_obtain_token_from_code_v1_user_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObtainAccessTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/v1/user/token/refresh/{refresh_token}": {
      "get": {
        "tags": ["User"],
        "summary": "Auth0 Obtain Token From Refresh",
        "operationId": "auth0_obtain_token_from_refresh_v1_user_token_refresh__refresh_token__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Refresh Token", "type": "string" },
            "name": "refresh_token",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/v1/user/authorize": {
      "get": {
        "tags": ["User"],
        "summary": "Auth0 Authorize Redirect",
        "operationId": "auth0_authorize_redirect_v1_user_authorize_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/v1/user/logout": {
      "get": {
        "tags": ["User"],
        "summary": "Logout",
        "operationId": "logout_v1_user_logout_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/v1/project/{project_id}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Project",
        "description": "Fetches all details about a project.",
        "operationId": "fetch_project_v1_project__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/hub/gallery": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Project Gallery",
        "description": "Fetches all projects in the gallery",
        "operationId": "fetch_project_gallery_v1_project_hub_gallery_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGalleryResponse"
                }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/sidebar/list": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch All Project",
        "description": "Fetches all project for authenticated user.",
        "operationId": "fetch_all_project_v1_project_sidebar_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectsResponse" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/update": {
      "post": {
        "tags": ["Project"],
        "summary": "Update Project Metadata",
        "description": "Edit project metadata.",
        "operationId": "update_project_metadata_v1_project_update_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id" },
            "name": "project_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EditProjectRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/update/{project_id}": {
      "post": {
        "tags": ["Project"],
        "summary": "Update Project Metadata",
        "description": "Edit project metadata.",
        "operationId": "update_project_metadata_v1_project_update__project_id__post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EditProjectRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/search/vector": {
      "post": {
        "tags": ["Project"],
        "summary": "Search Semantic",
        "operationId": "search_semantic_v1_project_search_vector_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/search/id": {
      "get": {
        "tags": ["Project"],
        "summary": "Search Semantic Id",
        "operationId": "search_semantic_id_v1_project_search_id_get",
        "parameters": [
          {
            "description": "The ID of the project.",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The ID of the project."
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "The ID of the projection.",
            "required": true,
            "schema": {
              "title": "Projection Id",
              "type": "string",
              "description": "The ID of the projection."
            },
            "name": "projection_id",
            "in": "query"
          },
          {
            "description": "The tiles to be used, as a JSON-encoded list.",
            "required": true,
            "schema": {
              "title": "Tiles",
              "type": "string",
              "description": "The tiles to be used, as a JSON-encoded list."
            },
            "name": "tiles",
            "in": "query"
          },
          {
            "description": "The tile index where the search embedding is located",
            "required": true,
            "schema": {
              "title": "Tix",
              "type": "integer",
              "description": "The tile index where the search embedding is located"
            },
            "name": "tix",
            "in": "query"
          },
          {
            "description": "The row number of the embedding in its quadtree tile",
            "required": true,
            "schema": {
              "title": "Rix",
              "type": "integer",
              "description": "The row number of the embedding in its quadtree tile"
            },
            "name": "rix",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/search/name": {
      "post": {
        "tags": ["Project"],
        "summary": "Project Name Search",
        "operationId": "project_name_search_v1_project_search_name_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectNameSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectNameSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/create": {
      "post": {
        "tags": ["Project"],
        "summary": "Create New Project",
        "description": "Create a project associated with an organization.",
        "operationId": "create_new_project_v1_project_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateProjectRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/remove": {
      "post": {
        "tags": ["Project"],
        "summary": "Remove A Project",
        "description": "Remove a project associated with an organization.\nAdditionally, kick off background tasks to remove other projects that are not fully deleted.",
        "operationId": "remove_a_project_v1_project_remove_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RemoveProjectRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/index/remove": {
      "post": {
        "tags": ["Project"],
        "summary": "Remove A Index",
        "description": "Remove an index",
        "operationId": "remove_a_index_v1_project_index_remove_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RemoveIndexRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/update_indices": {
      "post": {
        "tags": ["Project"],
        "summary": "Update Project Indices",
        "description": "Updates the indices in a project that has unindexed progressively added data",
        "operationId": "update_project_indices_v1_project_update_indices_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectIndicesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProjectIndicesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/delete": {
      "post": {
        "tags": ["Project"],
        "summary": "Data Delete",
        "description": "Deletes datums and corresponding atoms from the project. Does not reflect in project/index state until an\nindex update call if made (transaction commit)",
        "operationId": "data_delete_v1_project_data_delete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDataDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/update": {
      "post": {
        "tags": ["Project"],
        "summary": "Data Update",
        "description": "Updates the requested datums. Does not reflect in project/index state until an\nindex update call if made (transaction commit)",
        "operationId": "data_update_v1_project_data_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDataUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/get/arrow": {
      "post": {
        "tags": ["Project"],
        "summary": "Data Get Arrow",
        "description": "Export data as arrow format for a project and/or index",
        "operationId": "data_get_arrow_v1_project_data_get_arrow_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDataArrowExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/add/arrow": {
      "post": {
        "tags": ["Project"],
        "summary": "Add Arrow",
        "description": "Add data to a project in arrow format.",
        "operationId": "add_arrow_v1_project_data_add_arrow_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/get/nearest_neighbors/by_embedding": {
      "post": {
        "tags": ["Project"],
        "summary": "Nearest Neighbors By Embedding",
        "operationId": "nearest_neighbors_by_embedding_v1_project_data_get_nearest_neighbors_by_embedding_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingNeighborRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingNeighborResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/get/arrow/nearest_neighbors/by_id": {
      "post": {
        "tags": ["Project"],
        "summary": "Nearest Neighbors By Ids Arrow",
        "operationId": "nearest_neighbors_by_ids_arrow_v1_project_data_get_arrow_nearest_neighbors_by_id_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingNeighborByIDRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/get/nearest_neighbors/by_id": {
      "post": {
        "tags": ["Project"],
        "summary": "Nearest Neighbors By Ids",
        "operationId": "nearest_neighbors_by_ids_v1_project_data_get_nearest_neighbors_by_id_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingNeighborByIDRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingNeighborResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/get/embedding/topic": {
      "post": {
        "tags": ["Project"],
        "summary": "Data Topic Query",
        "operationId": "data_topic_query_v1_project_data_get_embedding_topic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmbeddingTopicRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/get/embedding/paged": {
      "post": {
        "tags": ["Project"],
        "summary": "Get Embedding Page Endpoint",
        "description": "Get a page of embedding data for a project",
        "operationId": "get_embedding_page_endpoint_v1_project_data_get_embedding_paged_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PagedEmbeddingRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/data/get": {
      "post": {
        "tags": ["Project"],
        "summary": "Get Datums By Ids External",
        "operationId": "get_datums_by_ids_external_v1_project_data_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GetDatumRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetDatumResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/atoms/get": {
      "post": {
        "tags": ["Project"],
        "summary": "Atoms Get",
        "operationId": "atoms_get_v1_project_atoms_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AtomsRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AtomsResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/index/create": {
      "post": {
        "tags": ["Project"],
        "summary": "Create Index",
        "description": "Creates an index and returns the job id of the index creation job.",
        "operationId": "create_index_v1_project_index_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAtlasIndexRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAtlasIndexResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/index/job/{job_id}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Index Job",
        "description": "Fetches an index job to the front-end.",
        "operationId": "fetch_index_job_v1_project_index_job__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Job Id", "type": "string" },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IndexJob" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/index/job/progress/{index_id}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Job Progress",
        "description": "Fetches latest job data by index id.",
        "operationId": "fetch_job_progress_v1_project_index_job_progress__index_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Index Id", "type": "string" },
            "name": "index_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JobProgressResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/jobs/status/{index_id}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Job System State",
        "description": "Gets the state of the job system for a particular atlas index.",
        "operationId": "fetch_job_system_state_v1_project_jobs_status__index_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Index Id", "type": "string" },
            "name": "index_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSystemIndexStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/{project_id}/index/projection/{projection_id}/quadtree/{quadtree_key}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Quadtree Tile",
        "description": "Fetches a quadtree tile to the front-end.",
        "operationId": "fetch_quadtree_tile_v1_project__project_id__index_projection__projection_id__quadtree__quadtree_key__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id", "type": "string" },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Projection Id", "type": "string" },
            "name": "projection_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Quadtree Key", "type": "string" },
            "name": "quadtree_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/{projection_id}/schema": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Schema",
        "operationId": "fetch_schema_v1_project_projection__projection_id__schema_get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Projection Id", "type": "string" },
            "name": "projection_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/{atlas_index_id}/topic_density": {
      "post": {
        "tags": ["Project"],
        "summary": "Topic Density",
        "operationId": "topic_density_v1_project__atlas_index_id__topic_density_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Atlas Index Id", "type": "string" },
            "name": "atlas_index_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TopicDensityRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicDensityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/{project_id}/index/projection/{projection_id}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Map Information",
        "description": "Fetches all information about a map such as topics, defaults, etc.",
        "operationId": "fetch_map_information_v1_project__project_id__index_projection__projection_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id", "type": "string" },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Projection Id", "type": "string" },
            "name": "projection_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/tag/add": {
      "post": {
        "tags": ["Project"],
        "summary": "Add Tag",
        "description": "Adds tag labels to atoms or datums.\nIf column names contains a field called 'type' which equals datum_ids, interprets the column as datum_ids.",
        "operationId": "add_tag_v1_project_tag_add_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/tag/delete": {
      "post": {
        "tags": ["Project"],
        "summary": "Delete Atom Tag",
        "description": "Given tag labels and atom ids, deletes atom id associations to those labels.",
        "operationId": "delete_atom_tag_v1_project_tag_delete_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/tag/read": {
      "post": {
        "tags": ["Project"],
        "summary": "Read Atom Tag",
        "description": "Given tag labels, returns back map positions and ids",
        "operationId": "read_atom_tag_v1_project_tag_read_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AtomTagReadRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AtomTagReadResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/tag/read/all_by_datum": {
      "post": {
        "tags": ["Project"],
        "summary": "Read Atom Tag By Datums",
        "description": "Reads all tags associated with datums.",
        "operationId": "read_atom_tag_by_datums_v1_project_tag_read_all_by_datum_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AtomTagAllByDatumRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AtomTagAllByDatumResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/tag/list": {
      "post": {
        "tags": ["Project"],
        "summary": "List Unique Atom Tags By Index",
        "description": "Lists all unique atom tags that have been added to an index",
        "operationId": "list_unique_atom_tags_by_index_v1_project_tag_list_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AtomTagListRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AtomTagUniqueListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/alias/{projection_alias}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Projection Alias",
        "description": "Fetches project id and projection id from an alias.",
        "operationId": "fetch_projection_alias_v1_project_projection_alias__projection_alias__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Projection Alias" },
            "name": "projection_alias",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectionAliasResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/v1/project/projection/alias/edit/{project_id}": {
      "post": {
        "tags": ["Project"],
        "summary": "Update Projection Alias",
        "description": "Edit or add projection alias.",
        "operationId": "update_projection_alias_v1_project_projection_alias_edit__project_id__post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditProjectionAliasRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/alias/get/{project_id}": {
      "post": {
        "tags": ["Project"],
        "summary": "Fetch Projection Alias By Projection Id",
        "description": "Get projection alias by projection id.",
        "operationId": "fetch_projection_alias_by_projection_id_v1_project_projection_alias_get__project_id__post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProjectionAliasRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectionAliasResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/topics/update/{topic_model_id}": {
      "post": {
        "tags": ["Project"],
        "summary": "Update Topic Model",
        "description": "Updates a topic model geojson with updates to topic position or topic label.\nCurrently accomplishes this by accepting an entirely new geojson and replacing\nexisting one. Will eventually be more granular than that.",
        "operationId": "update_topic_model_v1_project_topics_update__topic_model_id__post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Topic Model Id", "type": "string" },
            "name": "topic_model_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTopicModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/member/invite": {
      "post": {
        "tags": ["Project"],
        "summary": "Invite Member In Project",
        "description": "Invites a user in a project",
        "operationId": "invite_member_in_project_v1_project_member_invite_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/invitations": {
      "post": {
        "tags": ["Project"],
        "summary": "Get Project Invitations",
        "description": "Get project invitations for user",
        "operationId": "get_project_invitations_v1_project_invitations_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationsProjectResponse"
                }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/invitation/status": {
      "post": {
        "tags": ["Project"],
        "summary": "Update Project Invitation Status",
        "description": "Accept or reject invitation",
        "operationId": "update_project_invitation_status_v1_project_invitation_status_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/search/user": {
      "post": {
        "tags": ["Project"],
        "summary": "Search User",
        "description": "Searches against users by nickname and email who are non in the organization of the user performing search.\nThis endpoint is used when attempting to invite users to an organization.",
        "operationId": "search_user_v1_project_search_user_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchUserProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SearchUserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/v1/project/invitations/pending": {
      "post": {
        "tags": ["Project"],
        "summary": "Get Project Pending Invitations",
        "description": "Get project pending invitations",
        "operationId": "get_project_pending_invitations_v1_project_invitations_pending_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPendingInvitationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailInvitationsProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/invitations/delete": {
      "post": {
        "tags": ["Project"],
        "summary": "Remove Pending Invitation",
        "description": "Delete pending invitation",
        "operationId": "remove_pending_invitation_v1_project_invitations_delete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProjectPendingInvitationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/current/members": {
      "post": {
        "tags": ["Project"],
        "summary": "Fetch Project Members",
        "description": "Delete pending invitation",
        "operationId": "fetch_project_members_v1_project_current_members_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProjectMembersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectMembersResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/members/remove": {
      "post": {
        "tags": ["Project"],
        "summary": "Remove User",
        "description": "Removes a user from a project.",
        "operationId": "remove_user_v1_project_members_remove_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserFromProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/{organization_slug}/project/{project_slug}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Project By Slug",
        "description": "Fetches all details about a project.",
        "operationId": "fetch_project_by_slug_v1_project__organization_slug__project__project_slug__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Slug" },
            "name": "organization_slug",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Project Slug" },
            "name": "project_slug",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/{organization_slug}/{project_slug}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Project By Slug",
        "description": "Fetches all details about a project.",
        "operationId": "fetch_project_by_slug_v1_project__organization_slug___project_slug__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Organization Slug" },
            "name": "organization_slug",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Project Slug" },
            "name": "project_slug",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/{projection_id}/view/{state_hash}": {
      "get": {
        "tags": ["Project"],
        "summary": "Fetch Projection View From Hash",
        "description": "Fetches state-view variables for a projection.",
        "operationId": "fetch_projection_view_from_hash_v1_project_projection__projection_id__view__state_hash__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Projection Id", "type": "string" },
            "name": "projection_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "State Hash", "type": "string" },
            "name": "state_hash",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/{projection_id}/view": {
      "post": {
        "tags": ["Project"],
        "summary": "Create Hash",
        "description": "sets a projection state on a project",
        "operationId": "create_hash_v1_project_projection__projection_id__view_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Projection Id", "type": "string" },
            "name": "projection_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectionViewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/stripe/subscribe": {
      "post": {
        "tags": ["Stripe"],
        "summary": "Stripe Subscription",
        "description": "Create stripe subscription checkout session url and send it to front end",
        "operationId": "stripe_subscription_v1_stripe_subscribe_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StripeSubscriptionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeSubscriptionCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [
          { "Auth0ImplicitBearer": [] },
          { "Auth0HTTPBearer": [] },
          { "OAuth2PasswordBearer": [] }
        ]
      }
    },
    "/v1/stripe/set_organization_limits": {
      "post": {
        "tags": ["Stripe"],
        "summary": "Set Organization Billing Limits",
        "description": "Sets the organization billing limits",
        "operationId": "set_organization_billing_limits_v1_stripe_set_organization_limits_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetOrganizationLimitsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetOrganizationLimitsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/stripe/cancel": {
      "post": {
        "tags": ["Stripe"],
        "summary": "Cancel Stripe Subscription",
        "description": "Create stripe subscription checkout session url and send it to front end",
        "operationId": "cancel_stripe_subscription_v1_stripe_cancel_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StripeSubscriptionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/stripe/webhook": {
      "post": {
        "tags": ["Stripe"],
        "summary": "Webhook Received",
        "description": "Monitor stripe webhook triggered events",
        "operationId": "webhook_received_v1_stripe_webhook_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/v1/embedding/text": {
      "post": {
        "tags": ["Embedding Inference"],
        "summary": "Embed Text",
        "description": "Generates text embeddings",
        "operationId": "embed_text_v1_embedding_text_post",
        "parameters": [
          {
            "description": "Use semantic search mode",
            "required": false,
            "schema": {
              "title": "Semantic Search",
              "type": "boolean",
              "description": "Use semantic search mode",
              "default": false
            },
            "name": "semantic_search",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextEmbeddingInferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextEmbeddingInferenceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/create": {
      "post": {
        "tags": ["Tags"],
        "summary": "Create Tag Request",
        "operationId": "create_tag_request_v1_project_projection_tags_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TagRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/update/mask": {
      "post": {
        "tags": ["Tags"],
        "summary": "Tag Mask Request",
        "operationId": "tag_mask_request_v1_project_projection_tags_update_mask_post",
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/delete": {
      "post": {
        "tags": ["Tags"],
        "summary": "Delete Tag Request",
        "operationId": "delete_tag_request_v1_project_projection_tags_delete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TagWithIdRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/update": {
      "post": {
        "tags": ["Tags"],
        "summary": "Update Tag Request",
        "operationId": "update_tag_request_v1_project_projection_tags_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Request",
                "anyOf": [
                  { "$ref": "#/components/schemas/UpdateTagNameRequest" },
                  { "$ref": "#/components/schemas/UpdateTagDefinitionRequest" }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/get": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get Tag Request",
        "operationId": "get_tag_request_v1_project_projection_tags_get_get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id", "type": "string" },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "title": "Tag Id", "type": "string" },
            "name": "tag_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/get/all": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get Tags In Projection Request",
        "operationId": "get_tags_in_projection_request_v1_project_projection_tags_get_all_get",
        "parameters": [
          {
            "description": "The project UUID.",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The project UUID."
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "The projection UUID.",
            "required": true,
            "schema": {
              "title": "Projection Id",
              "type": "string",
              "description": "The projection UUID."
            },
            "name": "projection_id",
            "in": "query"
          },
          {
            "description": "Whether to return the full DSL rule for all tags",
            "required": false,
            "schema": {
              "title": "Include Dsl Rule",
              "type": "boolean",
              "description": "Whether to return the full DSL rule for all tags",
              "default": true
            },
            "name": "include_dsl_rule",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Tags In Projection Request V1 Project Projection Tags Get All Get",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TagResponse" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/status": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get Tag Status",
        "operationId": "get_tag_status_v1_project_projection_tags_status_get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id", "type": "string" },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "title": "Tag Id", "type": "string" },
            "name": "tag_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagStatus" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/project/projection/tags/robotag": {
      "post": {
        "tags": ["Tags"],
        "summary": "Tag Projection Job Request",
        "operationId": "tag_projection_job_request_v1_project_projection_tags_robotag_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TagWithIdRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    },
    "/v1/reduce/": {
      "post": {
        "tags": ["Projection Inference"],
        "summary": "Reduce Dimensionality By Embedding",
        "operationId": "reduce_dimensionality_by_embedding_v1_reduce__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DimensionalityReductionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DimensionalityReductionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "Auth0ImplicitBearer": [] }, { "Auth0HTTPBearer": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "APIKeyCreationRequest": {
        "title": "APIKeyCreationRequest",
        "required": ["key_name"],
        "type": "object",
        "properties": {
          "key_name": {
            "title": "Key Name",
            "type": "string",
            "description": "The name of the key to create."
          }
        }
      },
      "APIKeyCreationResponse": {
        "title": "APIKeyCreationResponse",
        "required": ["key"],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "type": "string",
            "description": "The API key that was created"
          }
        }
      },
      "APIKeyDeletionRequest": {
        "title": "APIKeyDeletionRequest",
        "required": ["key_name"],
        "type": "object",
        "properties": {
          "key_name": {
            "title": "Key Name",
            "type": "string",
            "description": "The name of the key to deleted."
          }
        }
      },
      "APIKeyListItem": {
        "title": "APIKeyListItem",
        "required": ["key_name", "expiration", "creation", "suffix"],
        "type": "object",
        "properties": {
          "key_name": { "title": "Key Name", "type": "string" },
          "expiration": {
            "title": "Expiration",
            "type": "string",
            "format": "date-time"
          },
          "creation": {
            "title": "Creation",
            "type": "string",
            "format": "date-time"
          },
          "suffix": { "title": "Suffix", "type": "string" }
        }
      },
      "APIKeyListResponse": {
        "title": "APIKeyListResponse",
        "type": "object",
        "properties": {
          "keys": {
            "title": "Keys",
            "type": "array",
            "items": { "$ref": "#/components/schemas/APIKeyListItem" },
            "default": []
          }
        }
      },
      "AccessRole": {
        "title": "AccessRole",
        "enum": ["OWNER", "ADMIN", "MEMBER", "VIEWER", "NONE"],
        "type": "string",
        "description": "An enumeration."
      },
      "AddUserRequest": {
        "title": "AddUserRequest",
        "required": ["user_id", "access_role", "organization_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "allOf": [{ "$ref": "#/components/schemas/AccessRole" }],
            "description": "The access role the new user should have: MEMBER, ADMIN, OWNER",
            "example": "MEMBER"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Unique organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "AtlasIndex": {
        "title": "AtlasIndex",
        "required": [
          "id",
          "project_id",
          "index_name",
          "indexed_field",
          "created_timestamp",
          "updated_timestamp",
          "atoms",
          "colorable_fields",
          "embedders",
          "nearest_neighbor_indices",
          "projections"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Index ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The project this index belongs to",
            "format": "uuid",
            "example": "43adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "index_name": {
            "title": "Index Name",
            "type": "string",
            "description": "The name of the index",
            "example": "My Test Index"
          },
          "indexed_field": {
            "title": "Indexed Field",
            "type": "string",
            "description": "The field that was indexed in the datums."
          },
          "created_timestamp": {
            "title": "Created Timestamp",
            "type": "string",
            "description": "The timestamp this index was created.",
            "format": "date-time"
          },
          "updated_timestamp": {
            "title": "Updated Timestamp",
            "type": "string",
            "description": "The timestamp this indx was updated.",
            "format": "date-time"
          },
          "atoms": {
            "title": "Atoms",
            "type": "array",
            "items": { "type": "string" },
            "description": "All of the atoms in this index."
          },
          "colorable_fields": {
            "title": "Colorable Fields",
            "type": "array",
            "items": { "type": "string" },
            "description": "The fields that can be colored by."
          },
          "embedders": {
            "title": "Embedders",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Embedder" },
            "description": "The embedder this Atlas Index uses."
          },
          "nearest_neighbor_indices": {
            "title": "Nearest Neighbor Indices",
            "type": "array",
            "items": { "$ref": "#/components/schemas/NearestNeighborIndex" },
            "description": "The nearest neighbor index this Atlas Index uses."
          },
          "projections": {
            "title": "Projections",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Projection" },
            "description": "The nearest neighbor index this Atlas Index uses."
          }
        }
      },
      "AtlasUsageResponse": {
        "title": "AtlasUsageResponse",
        "required": [
          "usage_since_date",
          "public_datapoints",
          "private_datapoints",
          "organization_seats",
          "embedding_models"
        ],
        "type": "object",
        "properties": {
          "usage_since_date": {
            "title": "Usage Since Date",
            "type": "string",
            "description": "The start date this usage record represents",
            "format": "date-time"
          },
          "public_datapoints": {
            "title": "Public Datapoints",
            "type": "integer",
            "description": "The number of public datapoints used."
          },
          "private_datapoints": {
            "title": "Private Datapoints",
            "type": "integer",
            "description": "The number of private datapoints used."
          },
          "organization_seats": {
            "title": "Organization Seats",
            "type": "integer",
            "description": "The number of organization seats currently used."
          },
          "embedding_models": {
            "title": "Embedding Models",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingModelInferenceUsage"
            }
          }
        }
      },
      "AtomTagAllByDatumRequest": {
        "title": "AtomTagAllByDatumRequest",
        "required": ["project_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The id of the project",
            "format": "uuid"
          }
        }
      },
      "AtomTagAllByDatumResponse": {
        "title": "AtomTagAllByDatumResponse",
        "required": ["results"],
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DatumTagResponse" },
            "description": "Maps datum ids to all annotated labels."
          }
        }
      },
      "AtomTagListRequest": {
        "title": "AtomTagListRequest",
        "required": ["project_id", "atlas_index_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The id of the project",
            "format": "uuid"
          },
          "atlas_index_id": {
            "title": "Atlas Index Id",
            "type": "string",
            "description": "The atlas index id, if atom_ids are provided",
            "format": "uuid",
            "example": "4addcf85-84ed-4e3a-9519-17c72682f905"
          },
          "atom_ids": {
            "title": "Atom Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "An optional list of atom_ids to restrict to, if passed"
          }
        }
      },
      "AtomTagReadRequest": {
        "title": "AtomTagReadRequest",
        "required": ["project_id", "atlas_index_id", "projection_id", "labels"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The id of the project",
            "format": "uuid"
          },
          "atlas_index_id": {
            "title": "Atlas Index Id",
            "type": "string",
            "description": "The atlas index id, if atom_ids are provided",
            "format": "uuid",
            "example": "4addcf85-84ed-4e3a-9519-17c72682f905"
          },
          "projection_id": {
            "title": "Projection Id",
            "type": "string",
            "description": "The projection you are performing this request for",
            "format": "uuid",
            "example": "4addcf85-84ed-4e3a-9519-17c72682f905"
          },
          "labels": {
            "title": "Labels",
            "type": "array",
            "items": { "type": "string" },
            "description": "The list of labels to retrieve"
          }
        }
      },
      "AtomTagReadResponse": {
        "title": "AtomTagReadResponse",
        "required": ["results"],
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AtomTagResult" },
            "description": "The map coordinates, tile id, tile offset and list of tags associated of each result."
          }
        }
      },
      "AtomTagResult": {
        "title": "AtomTagResult",
        "required": [
          "atom_id",
          "map_position",
          "map_quadtile_id",
          "map_quadtile_offset",
          "labels"
        ],
        "type": "object",
        "properties": {
          "atom_id": {
            "title": "Atom Id",
            "type": "string",
            "description": "The atom id."
          },
          "map_position": {
            "title": "Map Position",
            "type": "array",
            "items": {},
            "description": "Map x,y of the result"
          },
          "map_quadtile_id": {
            "title": "Map Quadtile Id",
            "type": "string",
            "description": "The id of the quadtile the result is in."
          },
          "map_quadtile_offset": {
            "title": "Map Quadtile Offset",
            "type": "string",
            "description": "The offset into the quadtile."
          },
          "labels": {
            "title": "Labels",
            "type": "array",
            "items": { "type": "string" },
            "description": "The set of labels associated with this atom."
          }
        }
      },
      "AtomTagUniqueListEntry": {
        "title": "AtomTagUniqueListEntry",
        "required": ["label", "frequency"],
        "type": "object",
        "properties": {
          "label": {
            "title": "Label",
            "type": "string",
            "description": "The text of the labels"
          },
          "frequency": {
            "title": "Frequency",
            "type": "integer",
            "description": "The number of datums with this tag."
          }
        }
      },
      "AtomTagUniqueListResponse": {
        "title": "AtomTagUniqueListResponse",
        "required": ["labels"],
        "type": "object",
        "properties": {
          "labels": {
            "title": "Labels",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AtomTagUniqueListEntry" },
            "description": "The list of tags to retrieve"
          }
        }
      },
      "AtomsRequest": {
        "title": "AtomsRequest",
        "required": ["project_id", "index_id", "atom_ids"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Unique project id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "index_id": {
            "title": "Index Id",
            "type": "string",
            "description": "Unique index id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "atom_ids": {
            "title": "Atom Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "List of strings corresponding to ids of atoms to get"
          }
        }
      },
      "AtomsResponse": {
        "title": "AtomsResponse",
        "required": ["atoms"],
        "type": "object",
        "properties": {
          "atoms": {
            "title": "Atoms",
            "type": "object",
            "description": "The data for each atom, keyed by its atom_id"
          }
        }
      },
      "BaseModel": { "title": "BaseModel", "type": "object", "properties": {} },
      "CreateAtlasIndexRequest": {
        "title": "CreateAtlasIndexRequest",
        "required": [
          "project_id",
          "indexed_field",
          "model",
          "model_hyperparameters",
          "nearest_neighbor_index",
          "nearest_neighbor_index_hyperparameters",
          "projection",
          "projection_hyperparameters"
        ],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Unique project id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "index_name": {
            "title": "Index Name",
            "type": "string",
            "description": "The name of the index you are building."
          },
          "colorable_fields": {
            "title": "Colorable Fields",
            "type": "array",
            "items": { "type": "string" },
            "description": "The fields that can be colored by.",
            "default": []
          },
          "modality": {
            "title": "Modality",
            "type": "string",
            "description": "The data modality of the index."
          },
          "reuse_atoms_and_embeddings_from": {
            "title": "Reuse Atoms And Embeddings From",
            "type": "string",
            "description": "If passed, will reuse atoms and embeddings from the specified index"
          },
          "indexed_field": {
            "title": "Indexed Field",
            "type": "string",
            "description": "The field this index is indexing. Should be set to None for embedding projects."
          },
          "atomizer_strategies": {
            "title": "Atomizer Strategies",
            "type": "array",
            "items": { "type": "string" },
            "description": "The atomizer strategies to use when building this index. Should be set to None for embedding projects.",
            "default": ["document"]
          },
          "geometry_strategies": {
            "title": "Geometry Strategies",
            "type": "array",
            "items": { "type": "array", "items": { "type": "string" } },
            "description": "The sets of geometry strategies to use when building this index. Should be set to None for embedding projects.",
            "default": [["document"]]
          },
          "model": {
            "title": "Model",
            "type": "string",
            "description": "The model to encode your data with. Should be set to None for embedding projects."
          },
          "model_hyperparameters": {
            "title": "Model Hyperparameters",
            "type": "string",
            "description": "JSON representation of hyperparameters to train the model with. Should be set to None for embedding projects."
          },
          "nearest_neighbor_index": {
            "title": "Nearest Neighbor Index",
            "type": "string",
            "description": "The nearest neighbor index to build."
          },
          "nearest_neighbor_index_hyperparameters": {
            "title": "Nearest Neighbor Index Hyperparameters",
            "type": "string",
            "description": "JSON representation of hyperparameters to train the model with"
          },
          "projection": {
            "title": "Projection",
            "type": "string",
            "description": "The projection to build."
          },
          "projection_hyperparameters": {
            "title": "Projection Hyperparameters",
            "type": "string",
            "description": "JSON representation of hyperparameters to train the model with"
          },
          "topic_model_hyperparameters": {
            "title": "Topic Model Hyperparameters",
            "type": "string",
            "description": "JSON representation of hyperparameters to build the topic model with",
            "default": "{\"build_topic_model\": false}"
          },
          "duplicate_detection_hyperparameters": {
            "title": "Duplicate Detection Hyperparameters",
            "type": "string",
            "description": "JSON representation of hyperparameters used for duplicate detection",
            "default": "{\"tag_duplicates\": false, \"duplicate_cutoff\": 0.1}"
          }
        }
      },
      "CreateAtlasIndexResponse": {
        "title": "CreateAtlasIndexResponse",
        "required": ["job_id"],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string",
            "description": "The job id of the index creation job.",
            "format": "uuid"
          }
        }
      },
      "CreateOrganizationRequest": {
        "title": "CreateOrganizationRequest",
        "required": ["nickname"],
        "type": "object",
        "properties": {
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "The name of the organization."
          },
          "description": {
            "title": "Description",
            "maxLength": 512,
            "type": "string",
            "description": "A description of the organization."
          },
          "logo_url": {
            "title": "Logo Url",
            "maxLength": 512,
            "type": "string",
            "description": "The logo of the organization."
          },
          "website": {
            "title": "Website",
            "maxLength": 255,
            "type": "string",
            "description": "The website of the organization."
          },
          "organization_type": {
            "title": "Organization Type",
            "type": "string",
            "description": "The type of organization.",
            "default": "personal"
          }
        }
      },
      "CreateOrganizationResponse": {
        "title": "CreateOrganizationResponse",
        "required": ["organization_id"],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization ID",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "CreateProjectRequest": {
        "title": "CreateProjectRequest",
        "required": ["organization_id", "project_name", "unique_id_field"],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Unique organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "The name of the project",
            "example": "example-project"
          },
          "modality": {
            "title": "Modality",
            "type": "string",
            "description": "The data modality of this project"
          },
          "unique_id_field": {
            "title": "Unique Id Field",
            "type": "string",
            "description": "The unique ID field of the project."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of your project.",
            "default": ""
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean",
            "description": "Is the project public?",
            "default": false
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The desired url slug for the project"
          }
        }
      },
      "CreateProjectionViewRequest": {
        "title": "CreateProjectionViewRequest",
        "type": "object",
        "properties": {
          "dsl_rule": {
            "title": "Dsl Rule",
            "type": "string",
            "description": "The JSON serialization of the selection state"
          },
          "deepscatter_api": {
            "title": "Deepscatter Api",
            "type": "string",
            "description": "The JSON serialization of the deepscatter API call"
          }
        }
      },
      "DatumTagResponse": {
        "title": "DatumTagResponse",
        "required": ["datum_id", "labels"],
        "type": "object",
        "properties": {
          "datum_id": {
            "title": "Datum Id",
            "type": "string",
            "description": "The datum id"
          },
          "labels": {
            "title": "Labels",
            "type": "array",
            "items": { "type": "string" },
            "description": "The labels associated with this datum_id"
          }
        }
      },
      "DeletePendingInvitationRequest": {
        "title": "DeletePendingInvitationRequest",
        "required": ["id", "organization_id"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Initation id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "DeleteProjectPendingInvitationRequest": {
        "title": "DeleteProjectPendingInvitationRequest",
        "required": ["user_id", "organization_id", "project_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Project id to delete pending invitations for",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "DimensionalityReductionRequest": {
        "title": "DimensionalityReductionRequest",
        "required": ["embeddings", "n_neighbors"],
        "type": "object",
        "properties": {
          "embeddings": {
            "title": "Embeddings",
            "type": "array",
            "items": { "type": "array", "items": { "type": "number" } },
            "description": "The embeddings you want to project."
          },
          "n_neighbors": {
            "title": "N Neighbors",
            "type": "integer",
            "description": "Number of neighbors for projection"
          },
          "model": {
            "allOf": [{ "$ref": "#/components/schemas/NomicProjectModel" }],
            "description": "The model to use when projecting.",
            "default": "nomic-project-v1"
          }
        }
      },
      "DimensionalityReductionResponse": {
        "title": "DimensionalityReductionResponse",
        "required": ["projection"],
        "type": "object",
        "properties": {
          "projection": {
            "title": "Projection",
            "type": "array",
            "items": { "type": "array", "items": { "type": "number" } },
            "description": "Projection of embeddings"
          }
        }
      },
      "EditProjectRequest": {
        "title": "EditProjectRequest",
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "Project name to update"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Project description to update"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean",
            "description": "Should the project be public?"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "A new slug to use in project urls."
          }
        }
      },
      "EditProjectionAliasRequest": {
        "title": "EditProjectionAliasRequest",
        "required": ["project_id", "projection_id", "alias_value"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Project ID to edit alias for"
          },
          "projection_id": {
            "title": "Projection Id",
            "type": "string",
            "description": "Projection ID to edit alias for"
          },
          "alias_value": {
            "title": "Alias Value",
            "type": "string",
            "description": "Value to set for alias"
          },
          "replace": {
            "title": "Replace",
            "type": "boolean",
            "description": "Replace projection this alias currently points to",
            "default": false
          }
        }
      },
      "EmailInvitationProjectModel": {
        "title": "EmailInvitationProjectModel",
        "required": [
          "user_id",
          "access_role",
          "organization_id",
          "project_id",
          "email",
          "nickname"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role",
            "example": "MEMBER"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Inviter project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User email",
            "example": "nomic@gmail.com"
          },
          "picture": {
            "title": "Picture",
            "type": "string",
            "description": "The users profile image"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "Nickname of user"
          }
        }
      },
      "EmailInvitationsProjectResponse": {
        "title": "EmailInvitationsProjectResponse",
        "required": ["invitations"],
        "type": "object",
        "properties": {
          "invitations": {
            "title": "Invitations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailInvitationProjectModel"
            },
            "description": "Invitation list"
          }
        }
      },
      "Embedder": {
        "title": "Embedder",
        "required": [
          "id",
          "atlas_index_id",
          "ready",
          "model_name",
          "hyperparameters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Embedder id ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "atlas_index_id": {
            "title": "Atlas Index Id",
            "type": "string",
            "description": "The index this atomizer corresponds to.",
            "format": "uuid"
          },
          "ready": {
            "title": "Ready",
            "type": "boolean",
            "description": "Is this embedder ready?"
          },
          "model_name": {
            "title": "Model Name",
            "type": "string",
            "description": "The embedder model this embedder embeds with."
          },
          "hyperparameters": {
            "title": "Hyperparameters",
            "type": "object",
            "description": "The hyperparameters this model was trained with."
          }
        }
      },
      "EmbeddingModelInferenceUsage": {
        "title": "EmbeddingModelInferenceUsage",
        "required": ["model", "tokens"],
        "type": "object",
        "properties": {
          "model": {
            "title": "Model",
            "anyOf": [
              { "$ref": "#/components/schemas/NomicTextEmbeddingModel" },
              { "$ref": "#/components/schemas/NomicImageEmbeddingModel" }
            ],
            "description": "The embedding model used."
          },
          "tokens": {
            "title": "Tokens",
            "type": "integer",
            "description": "The total tokens used."
          }
        }
      },
      "EmbeddingNeighborByIDRequest": {
        "title": "EmbeddingNeighborByIDRequest",
        "required": ["atlas_index_id"],
        "type": "object",
        "properties": {
          "atlas_index_id": {
            "title": "Atlas Index Id",
            "type": "string",
            "description": "Unique atlas index id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "datum_ids": {
            "title": "Datum Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "The datum ids to query."
          },
          "atom_ids": {
            "title": "Atom Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "The atom ids to query."
          },
          "k": {
            "title": "K",
            "type": "integer",
            "description": "The number of neighbors to return",
            "default": 4
          }
        }
      },
      "EmbeddingNeighborRequest": {
        "title": "EmbeddingNeighborRequest",
        "required": ["atlas_index_id", "queries"],
        "type": "object",
        "properties": {
          "atlas_index_id": {
            "title": "Atlas Index Id",
            "type": "string",
            "description": "Unique atlas index id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "queries": {
            "title": "Queries",
            "type": "string",
            "description": "The bytes of a batch of embeddings to get neighbors for"
          },
          "k": {
            "title": "K",
            "type": "integer",
            "description": "The number of neighbors to return",
            "default": 4
          }
        }
      },
      "EmbeddingNeighborResponse": {
        "title": "EmbeddingNeighborResponse",
        "required": ["neighbors", "distances"],
        "type": "object",
        "properties": {
          "neighbors": {
            "title": "Neighbors",
            "type": "array",
            "items": { "type": "array", "items": { "type": "string" } },
            "description": "nested list of nearest neighbors"
          },
          "distances": {
            "title": "Distances",
            "type": "array",
            "items": { "type": "array", "items": { "type": "number" } },
            "description": "distances of the neighbors to queries"
          }
        }
      },
      "EmbeddingTopicRequest": {
        "title": "EmbeddingTopicRequest",
        "required": ["atlas_index_id", "queries"],
        "type": "object",
        "properties": {
          "atlas_index_id": {
            "title": "Atlas Index Id",
            "type": "string",
            "description": "Unique atlas index id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "queries": {
            "title": "Queries",
            "type": "string",
            "description": "The bytes of a batch of embeddings to get topics for"
          },
          "topic_model_id": {
            "title": "Topic Model Id",
            "type": "string",
            "description": "The topic model to search under",
            "default": ""
          },
          "k": {
            "title": "K",
            "type": "integer",
            "description": "Number of neighbors to use when inferring topics",
            "default": 32
          },
          "depth": {
            "title": "Depth",
            "type": "integer",
            "description": "The depth at which you want to estimate a topic",
            "default": 1
          }
        }
      },
      "EmbeddingUsageModel": {
        "title": "EmbeddingUsageModel",
        "required": ["prompt_tokens", "total_tokens"],
        "type": "object",
        "properties": {
          "prompt_tokens": {
            "title": "Prompt Tokens",
            "type": "integer",
            "description": "The number of non-generated tokens ingested."
          },
          "total_tokens": {
            "title": "Total Tokens",
            "type": "integer",
            "description": "The total tokens used."
          }
        }
      },
      "Feature": {
        "title": "Feature",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "Feature",
            "const": "Feature"
          },
          "geometry": {
            "title": "Geometry",
            "anyOf": [
              { "$ref": "#/components/schemas/Point" },
              { "$ref": "#/components/schemas/MultiPoint" },
              { "$ref": "#/components/schemas/LineString" },
              { "$ref": "#/components/schemas/MultiLineString" },
              { "$ref": "#/components/schemas/Polygon" },
              { "$ref": "#/components/schemas/MultiPolygon" },
              { "$ref": "#/components/schemas/GeometryCollection" }
            ]
          },
          "properties": {
            "title": "Properties",
            "anyOf": [
              { "type": "object" },
              { "$ref": "#/components/schemas/BaseModel" }
            ]
          },
          "id": { "title": "Id", "type": "string" },
          "bbox": {
            "title": "Bbox",
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "type": "array",
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ]
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "type": "array",
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ]
              }
            ]
          }
        },
        "description": "Feature Model"
      },
      "FeatureCollection": {
        "title": "FeatureCollection",
        "required": ["features"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "FeatureCollection",
            "const": "FeatureCollection"
          },
          "features": {
            "title": "Features",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Feature" }
          },
          "bbox": {
            "title": "Bbox",
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "type": "array",
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ]
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "type": "array",
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ]
              }
            ]
          }
        },
        "description": "FeatureCollection Model"
      },
      "GeometryCollection": {
        "title": "GeometryCollection",
        "required": ["geometries"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "GeometryCollection",
            "const": "GeometryCollection"
          },
          "geometries": {
            "title": "Geometries",
            "type": "array",
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/Point" },
                { "$ref": "#/components/schemas/MultiPoint" },
                { "$ref": "#/components/schemas/LineString" },
                { "$ref": "#/components/schemas/MultiLineString" },
                { "$ref": "#/components/schemas/Polygon" },
                { "$ref": "#/components/schemas/MultiPolygon" }
              ]
            }
          }
        },
        "description": "GeometryCollection Model"
      },
      "GetDatumRequest": {
        "title": "GetDatumRequest",
        "required": ["project_id", "datum_ids"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The id of the project to update.",
            "format": "uuid"
          },
          "datum_ids": {
            "title": "Datum Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "The datum ids to retrieve."
          }
        }
      },
      "GetDatumResponse": {
        "title": "GetDatumResponse",
        "required": ["datums"],
        "type": "object",
        "properties": {
          "datums": {
            "title": "Datums",
            "type": "array",
            "items": { "type": "object" },
            "description": "The returned datums without json deserialization."
          }
        }
      },
      "GetProjectMembersRequest": {
        "title": "GetProjectMembersRequest",
        "required": ["project_id", "organization_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Unique organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "GetProjectMembersResponse": {
        "title": "GetProjectMembersResponse",
        "required": ["members"],
        "type": "object",
        "properties": {
          "members": {
            "title": "Members",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectRolesModel" },
            "description": "All members for project"
          }
        }
      },
      "GetProjectionAliasRequest": {
        "title": "GetProjectionAliasRequest",
        "required": ["project_id", "projection_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Project ID to get alias for"
          },
          "projection_id": {
            "title": "Projection Id",
            "type": "string",
            "description": "Projection ID to get alias for"
          }
        }
      },
      "GetProjectionAliasResponse": {
        "title": "GetProjectionAliasResponse",
        "required": ["alias_value"],
        "type": "object",
        "properties": {
          "alias_value": {
            "title": "Alias Value",
            "type": "string",
            "description": "Value of alias"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ValidationError" }
          }
        }
      },
      "IndexJob": {
        "title": "IndexJob",
        "required": [
          "id",
          "index_id",
          "job_start_timestamp",
          "job_end_timestamp",
          "total_datums_remaining_to_atomize",
          "total_atoms_remaining_to_embed",
          "nearest_neighbor_indices_remaining_to_build",
          "projections_remaining_to_build",
          "topic_models_remaining_to_build",
          "rebuild_topic_models"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Job ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "index_id": {
            "title": "Index Id",
            "type": "string",
            "description": "Index ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "job_start_timestamp": {
            "title": "Job Start Timestamp",
            "type": "string",
            "description": "The timestamp of when the job started.",
            "format": "date-time",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "job_end_timestamp": {
            "title": "Job End Timestamp",
            "type": "string",
            "description": "The timestamp of when the job ended.",
            "format": "date-time",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "total_datums_remaining_to_atomize": {
            "title": "Total Datums Remaining To Atomize",
            "type": "integer",
            "description": "The total datums remaining to atomize",
            "example": "1"
          },
          "total_atoms_remaining_to_embed": {
            "title": "Total Atoms Remaining To Embed",
            "type": "integer",
            "description": "The total datums remaining to embed",
            "example": "1"
          },
          "nearest_neighbor_indices_remaining_to_build": {
            "title": "Nearest Neighbor Indices Remaining To Build",
            "type": "integer",
            "description": "The total nearest neighbor indices remaining to build",
            "example": "1"
          },
          "projections_remaining_to_build": {
            "title": "Projections Remaining To Build",
            "type": "integer",
            "description": "The total projections remaining to build.",
            "example": "1"
          },
          "topic_models_remaining_to_build": {
            "title": "Topic Models Remaining To Build",
            "type": "integer",
            "description": "The total topic models remaining to build.",
            "example": "1"
          },
          "rebuild_topic_models": {
            "title": "Rebuild Topic Models",
            "type": "boolean",
            "description": "Whether topic models are rebuilding"
          }
        }
      },
      "InvitationModel": {
        "title": "InvitationModel",
        "required": [
          "id",
          "user_id",
          "access_role",
          "organization_nickname",
          "organization_id",
          "user_nickname"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Initation id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role",
            "example": "MEMBER"
          },
          "organization_nickname": {
            "title": "Organization Nickname",
            "type": "string",
            "description": "Organization name",
            "example": "MyOrganization"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "user_nickname": {
            "title": "User Nickname",
            "type": "string",
            "description": "Nickname of user"
          }
        }
      },
      "InvitationModelPendingOrg": {
        "title": "InvitationModelPendingOrg",
        "required": [
          "id",
          "user_id",
          "access_role",
          "organization_nickname",
          "organization_id",
          "user_nickname",
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Initation id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role",
            "example": "MEMBER"
          },
          "organization_nickname": {
            "title": "Organization Nickname",
            "type": "string",
            "description": "Organization name",
            "example": "MyOrganization"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "user_nickname": {
            "title": "User Nickname",
            "type": "string",
            "description": "Nickname of user"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User email",
            "example": "nomic@gmail.com"
          },
          "picture": {
            "title": "Picture",
            "type": "string",
            "description": "The users profile image"
          }
        }
      },
      "InvitationProjectModel": {
        "title": "InvitationProjectModel",
        "required": [
          "user_id",
          "access_role",
          "project_name",
          "organization_id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role",
            "example": "MEMBER"
          },
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "Project name",
            "example": "myProject"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Inviter project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "InvitationsPendingResponse": {
        "title": "InvitationsPendingResponse",
        "required": ["invitations"],
        "type": "object",
        "properties": {
          "invitations": {
            "title": "Invitations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitationModelPendingOrg"
            },
            "description": "Invitation list"
          }
        }
      },
      "InvitationsProjectResponse": {
        "title": "InvitationsProjectResponse",
        "required": ["invitations"],
        "type": "object",
        "properties": {
          "invitations": {
            "title": "Invitations",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvitationProjectModel" },
            "description": "Invitation list"
          }
        }
      },
      "InvitationsResponse": {
        "title": "InvitationsResponse",
        "required": ["invitations"],
        "type": "object",
        "properties": {
          "invitations": {
            "title": "Invitations",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvitationModel" },
            "description": "Invitation list"
          }
        }
      },
      "InviteUserProjectRequest": {
        "title": "InviteUserProjectRequest",
        "required": ["user_id", "access_role", "project_id", "organization_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id to invite",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role to set",
            "example": "MEMBER"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Inviter project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "InviteUserRequest": {
        "title": "InviteUserRequest",
        "required": ["user_id", "access_role", "organization_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id to invite",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role to set",
            "example": "MEMBER"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "JobProgressResponse": {
        "title": "JobProgressResponse",
        "required": [
          "result",
          "job_start_timestamp",
          "job_end_timestamp",
          "index_build_stage"
        ],
        "type": "object",
        "properties": {
          "result": {
            "title": "Result",
            "type": "integer",
            "description": "Percentage of progress"
          },
          "job_start_timestamp": {
            "title": "Job Start Timestamp",
            "type": "string",
            "description": "Job start timestamp",
            "format": "date-time"
          },
          "job_end_timestamp": {
            "title": "Job End Timestamp",
            "type": "string",
            "description": "Job end timestamp",
            "format": "date-time"
          },
          "index_build_stage": {
            "title": "Index Build Stage",
            "type": "string",
            "description": "Stage of progress"
          }
        }
      },
      "JobSystemIndexStatusResponse": {
        "title": "JobSystemIndexStatusResponse",
        "required": ["index_id", "status", "jobs"],
        "type": "object",
        "properties": {
          "index_id": {
            "title": "Index Id",
            "type": "string",
            "description": "The atlas index id",
            "example": "4addcf85-84ed-4e3a-9519-17c72682f905"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "The status of the index job : initiated, completed, failed"
          },
          "jobs": {
            "title": "Jobs",
            "type": "array",
            "items": { "$ref": "#/components/schemas/JobTypeStatus" },
            "description": "The progress of the index job"
          }
        }
      },
      "JobTypeStatus": {
        "title": "JobTypeStatus",
        "required": ["job_type", "state", "creation_time", "start_time"],
        "type": "object",
        "properties": {
          "job_type": {
            "title": "Job Type",
            "type": "string",
            "description": "The type of job"
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "The job type state"
          },
          "creation_time": {
            "title": "Creation Time",
            "type": "string",
            "description": "The job creation time",
            "format": "date-time"
          },
          "ready_time": {
            "title": "Ready Time",
            "type": "string",
            "description": "The time the job became eligible to run",
            "format": "date-time"
          },
          "start_time": {
            "title": "Start Time",
            "type": "string",
            "description": "The job start time",
            "format": "date-time"
          },
          "end_time": {
            "title": "End Time",
            "type": "string",
            "description": "The job end time",
            "format": "date-time"
          },
          "worker_id": {
            "title": "Worker Id",
            "type": "string",
            "description": "The UUID of the worker that last attempted the job"
          },
          "attempt": {
            "title": "Attempt",
            "type": "integer",
            "description": "# of attempts made to run the job (0 if it has not been assigned)"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "description": "Job priority (higher runs first)"
          }
        }
      },
      "LineString": {
        "title": "LineString",
        "required": ["coordinates"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "LineString",
            "const": "LineString"
          },
          "coordinates": {
            "title": "Coordinates",
            "minItems": 2,
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array",
                  "items": [{ "type": "number" }, { "type": "number" }]
                },
                {
                  "maxItems": 3,
                  "minItems": 3,
                  "type": "array",
                  "items": [
                    { "type": "number" },
                    { "type": "number" },
                    { "type": "number" }
                  ]
                }
              ]
            }
          }
        },
        "description": "LineString Model"
      },
      "LongTextHandlingMode": {
        "title": "LongTextHandlingMode",
        "enum": ["truncate", "mean"],
        "description": "An enumeration."
      },
      "ModifyUserRequest": {
        "title": "ModifyUserRequest",
        "required": ["user_id", "access_role", "organization_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "allOf": [{ "$ref": "#/components/schemas/AccessRole" }],
            "description": "The access role the new user should have: MEMBER, ADMIN, OWNER",
            "example": "MEMBER"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Unique organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "MultiLineString": {
        "title": "MultiLineString",
        "required": ["coordinates"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "MultiLineString",
            "const": "MultiLineString"
          },
          "coordinates": {
            "title": "Coordinates",
            "minItems": 1,
            "type": "array",
            "items": {
              "minItems": 2,
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array",
                    "items": [{ "type": "number" }, { "type": "number" }]
                  },
                  {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "items": [
                      { "type": "number" },
                      { "type": "number" },
                      { "type": "number" }
                    ]
                  }
                ]
              }
            }
          }
        },
        "description": "MultiLineString Model"
      },
      "MultiPoint": {
        "title": "MultiPoint",
        "required": ["coordinates"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "MultiPoint",
            "const": "MultiPoint"
          },
          "coordinates": {
            "title": "Coordinates",
            "minItems": 1,
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array",
                  "items": [{ "type": "number" }, { "type": "number" }]
                },
                {
                  "maxItems": 3,
                  "minItems": 3,
                  "type": "array",
                  "items": [
                    { "type": "number" },
                    { "type": "number" },
                    { "type": "number" }
                  ]
                }
              ]
            }
          }
        },
        "description": "MultiPoint Model"
      },
      "MultiPolygon": {
        "title": "MultiPolygon",
        "required": ["coordinates"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "MultiPolygon",
            "const": "MultiPolygon"
          },
          "coordinates": {
            "title": "Coordinates",
            "minItems": 1,
            "type": "array",
            "items": {
              "minItems": 1,
              "type": "array",
              "items": {
                "minItems": 4,
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "maxItems": 2,
                      "minItems": 2,
                      "type": "array",
                      "items": [{ "type": "number" }, { "type": "number" }]
                    },
                    {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": [
                        { "type": "number" },
                        { "type": "number" },
                        { "type": "number" }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "MultiPolygon Model"
      },
      "NearestNeighborIndex": {
        "title": "NearestNeighborIndex",
        "required": [
          "id",
          "index_name",
          "ready",
          "hyperparameters",
          "atom_strategies"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Nearest Neighbor Index ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "index_name": {
            "title": "Index Name",
            "type": "string",
            "description": "The type of nearest neighbor index",
            "example": "faiss"
          },
          "ready": {
            "title": "Ready",
            "type": "boolean",
            "description": "Is this NN index ready?"
          },
          "hyperparameters": {
            "title": "Hyperparameters",
            "type": "object",
            "description": "The hyperparameters of this index."
          },
          "atom_strategies": {
            "title": "Atom Strategies",
            "type": "array",
            "items": { "type": "string" },
            "description": "The phrase strategies of the phrases this embedder is embedding."
          }
        }
      },
      "NomicImageEmbeddingModel": {
        "title": "NomicImageEmbeddingModel",
        "enum": ["nomic-embed-vision-v1"],
        "description": "An enumeration."
      },
      "NomicProjectModel": {
        "title": "NomicProjectModel",
        "enum": ["nomic-project-v1", "nomic-project-v2"],
        "type": "string",
        "description": "An enumeration."
      },
      "NomicTextEmbeddingModel": {
        "title": "NomicTextEmbeddingModel",
        "enum": [
          "all-MiniLM-L6-v2",
          "nomic-embed-text-v1",
          "nomic-embed-text-v1.5",
          "nomic-embed-code"
        ],
        "description": "An enumeration."
      },
      "ObtainAccessTokenRequest": {
        "title": "ObtainAccessTokenRequest",
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string",
            "description": "The code to use to obtain the access token."
          }
        }
      },
      "Organization": {
        "title": "Organization",
        "required": [
          "id",
          "nickname",
          "plan_type",
          "time_created",
          "members",
          "projects",
          "slug",
          "organization_type",
          "linked_user_account_id",
          "public_organization",
          "features",
          "max_datums_per_project",
          "max_members",
          "max_projects",
          "stripe_subscription_id",
          "stripe_customer_id",
          "stripe_subscription_start_timestamp",
          "stripe_subscription_end_timestamp",
          "max_external_collaborators",
          "project_count",
          "max_datums_across_all_projects"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "The organization nickname",
            "example": "nomicai"
          },
          "plan_type": {
            "title": "Plan Type",
            "type": "string",
            "description": "The plan type this organization is on."
          },
          "time_created": {
            "title": "Time Created",
            "type": "string",
            "description": "When this organizations was created.",
            "format": "date-time"
          },
          "members": {
            "title": "Members",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMembershipWithPicture"
            },
            "description": "All of the organization members with access roles."
          },
          "projects": {
            "title": "Projects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMetadataBaseModel"
            },
            "description": "All of the organizations projects the requested user can access"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The organization url-safe slug"
          },
          "organization_type": {
            "title": "Organization Type",
            "type": "string",
            "description": "The type of organization: personal, company and academic"
          },
          "linked_user_account_id": {
            "title": "Linked User Account Id",
            "type": "string",
            "description": "The user id of the linked account Atlas account to this organization. Null if there is no linked account.",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Access role of user for this organization",
            "default": "VIEWER"
          },
          "public_organization": {
            "title": "Public Organization",
            "type": "boolean",
            "description": "Is the organization public?"
          },
          "description": {
            "title": "Description",
            "maxLength": 512,
            "type": "string",
            "description": "A description for this organization."
          },
          "logo_url": {
            "title": "Logo Url",
            "maxLength": 512,
            "type": "string",
            "description": "The url of the organization logo."
          },
          "website": {
            "title": "Website",
            "maxLength": 255,
            "type": "string",
            "description": "The url of the organization website."
          },
          "features": {
            "title": "Features",
            "type": "array",
            "items": { "type": "string" },
            "description": "The features this organization is allowed to utilize."
          },
          "max_datums_per_project": {
            "title": "Max Datums Per Project",
            "type": "string",
            "description": "The maximum number of datums per project this organization is allowed."
          },
          "max_members": {
            "title": "Max Members",
            "type": "string",
            "description": "The maximum number of members this organization is allowed."
          },
          "max_projects": {
            "title": "Max Projects",
            "type": "integer",
            "description": "The maximum number of projects this organization can create."
          },
          "stripe_subscription_id": {
            "title": "Stripe Subscription Id",
            "type": "string",
            "description": "Stripe subscription id",
            "example": "sub_e31fd13"
          },
          "stripe_customer_id": {
            "title": "Stripe Customer Id",
            "type": "string",
            "description": "Stripe subscription id",
            "example": "cus_fe32413"
          },
          "stripe_subscription_start_timestamp": {
            "title": "Stripe Subscription Start Timestamp",
            "type": "string",
            "description": "The timestamp the stripe subscription billing period starts",
            "format": "date-time"
          },
          "stripe_subscription_end_timestamp": {
            "title": "Stripe Subscription End Timestamp",
            "type": "string",
            "description": "The timestamp the stripe subscription billing period ends",
            "format": "date-time"
          },
          "max_external_collaborators": {
            "title": "Max External Collaborators",
            "type": "integer",
            "description": "The maximum number of external collaborators."
          },
          "project_count": {
            "title": "Project Count",
            "type": "integer",
            "description": "The total number of projects of this organization"
          },
          "max_datums_across_all_projects": {
            "title": "Max Datums Across All Projects",
            "type": "integer",
            "description": "Max datums across all projects"
          }
        }
      },
      "OrganizationIDResponse": {
        "title": "OrganizationIDResponse",
        "required": ["organization_id"],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "OrganizationMembership": {
        "title": "OrganizationMembership",
        "required": [
          "organization_id",
          "nickname",
          "user_id",
          "access_role",
          "slug"
        ],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "Organization name",
            "example": "MyOrganization"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "User access role in organization",
            "example": "member"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The organization url-safe slug"
          }
        }
      },
      "OrganizationMembershipWithPicture": {
        "title": "OrganizationMembershipWithPicture",
        "required": [
          "organization_id",
          "nickname",
          "user_id",
          "access_role",
          "email"
        ],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "Organization name",
            "example": "MyOrganization"
          },
          "picture": {
            "title": "Picture",
            "type": "string",
            "description": "The users profile image"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "User access role in organization",
            "example": "member"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User email",
            "example": "nomic@gmail.com"
          }
        }
      },
      "PagedEmbeddingRequest": {
        "title": "PagedEmbeddingRequest",
        "required": ["projection_id"],
        "type": "object",
        "properties": {
          "projection_id": {
            "title": "Projection Id",
            "type": "string",
            "description": "Unique projection id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "last_file": {
            "title": "Last File",
            "type": "string",
            "description": "The previous page token to start from; or undefined to start from the beginning."
          },
          "page_size": {
            "title": "Page Size",
            "type": "integer",
            "description": "The number of embeddings to return in each page.",
            "default": 10000
          }
        }
      },
      "PendingInvitationsRequest": {
        "title": "PendingInvitationsRequest",
        "required": ["organization_id"],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization id to get pending invitations for",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "Point": {
        "title": "Point",
        "required": ["coordinates"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "Point",
            "const": "Point"
          },
          "coordinates": {
            "title": "Coordinates",
            "anyOf": [
              {
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
                "items": [{ "type": "number" }, { "type": "number" }]
              },
              {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ]
              }
            ]
          }
        },
        "description": "Point Model"
      },
      "Polygon": {
        "title": "Polygon",
        "required": ["coordinates"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "Polygon",
            "const": "Polygon"
          },
          "coordinates": {
            "title": "Coordinates",
            "minItems": 1,
            "type": "array",
            "items": {
              "minItems": 4,
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array",
                    "items": [{ "type": "number" }, { "type": "number" }]
                  },
                  {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "items": [
                      { "type": "number" },
                      { "type": "number" },
                      { "type": "number" }
                    ]
                  }
                ]
              }
            }
          }
        },
        "description": "Polygon Model"
      },
      "PrivateUser": {
        "title": "PrivateUser",
        "required": ["sub", "nickname", "name", "updated_at", "email"],
        "type": "object",
        "properties": {
          "sub": {
            "title": "Sub",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "The users nickname",
            "example": "nomicai"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The users name as registered in auth0",
            "example": "nomicai"
          },
          "picture": {
            "title": "Picture",
            "type": "string",
            "description": "The users profile image"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "The last time user information was updated on Auth0 side.",
            "format": "date-time"
          },
          "default_organization": {
            "title": "Default Organization",
            "type": "string",
            "description": "The users default organization.",
            "format": "uuid"
          },
          "stripe_customer_id": {
            "title": "Stripe Customer Id",
            "type": "string",
            "description": "The users stripe account."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "The user email"
          },
          "organizations": {
            "title": "Organizations",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrganizationMembership" },
            "description": "All of the organizations this user belongs to",
            "default": []
          },
          "waitlisted": {
            "title": "Waitlisted",
            "type": "boolean",
            "description": "Whether or not the user is wait-listed for Atlas access",
            "default": false
          }
        },
        "description": "Put user attributes here that are only returned in private endpoints"
      },
      "Project": {
        "title": "Project",
        "required": [
          "id",
          "owner",
          "project_name",
          "creator",
          "description",
          "is_public",
          "project_fields",
          "unique_id_field",
          "total_datums_in_project",
          "created_timestamp",
          "slug",
          "atlas_indices",
          "insert_update_delete_lock",
          "access_role",
          "organization_slug"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Project ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The organization ID that owns this project",
            "format": "uuid",
            "example": "43adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "The name of this project",
            "example": "example_project"
          },
          "creator": {
            "title": "Creator",
            "type": "string",
            "description": "The user id who created this project."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description for this project."
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean",
            "description": "Is the project viewable without being in the organzation?"
          },
          "project_fields": {
            "title": "Project Fields",
            "type": "array",
            "items": { "type": "string" },
            "description": "The list of fields a datum in the project may contain."
          },
          "unique_id_field": {
            "title": "Unique Id Field",
            "type": "string",
            "description": "The field that contains a unique id for each document."
          },
          "modality": {
            "title": "Modality",
            "type": "string",
            "description": "The project modality"
          },
          "total_datums_in_project": {
            "title": "Total Datums In Project",
            "type": "integer",
            "description": "Total datums in project."
          },
          "created_timestamp": {
            "title": "Created Timestamp",
            "type": "string",
            "description": "The timestamp this project was created.",
            "format": "date-time"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The project url-safe slug"
          },
          "atlas_indices": {
            "title": "Atlas Indices",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AtlasIndex" },
            "description": "All Atlas Indices built overtop of this project."
          },
          "insert_update_delete_lock": {
            "title": "Insert Update Delete Lock",
            "type": "boolean",
            "description": "Whether the project is locked for CRUD operations."
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Access role of user for this project"
          },
          "schema": {
            "title": "Schema",
            "type": "string",
            "description": "An Arrow schema for the project. Binary data encoded as base64."
          },
          "organization_slug": {
            "title": "Organization Slug",
            "type": "string",
            "description": "The organization url-safe slug"
          }
        }
      },
      "ProjectCreatedResponse": {
        "title": "ProjectCreatedResponse",
        "required": ["project_id", "slug"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The ID of the newly created project",
            "format": "uuid",
            "example": "4addcf85-84ed-4e3a-9519-17c72682f905"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The unique url slug of the project",
            "example": "test-project-123"
          }
        }
      },
      "ProjectDataArrowExportRequest": {
        "title": "ProjectDataArrowExportRequest",
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Project ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "index_id": {
            "title": "Index Id",
            "type": "string",
            "description": "Atlas index ID--needed for index-specific data",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "tags": {
            "title": "Tags",
            "type": "boolean",
            "description": "Whether to export tags",
            "default": false
          },
          "metadata": {
            "title": "Metadata",
            "type": "boolean",
            "description": "Whether to export the core metadata (aside from tags, embeddings)",
            "default": false
          },
          "embeddings": {
            "title": "Embeddings",
            "type": "boolean",
            "description": "Whether to export embeddings",
            "default": false
          },
          "topics": {
            "title": "Topics",
            "type": "boolean",
            "description": "Whether to export topics",
            "default": false
          }
        }
      },
      "ProjectDataDeleteRequest": {
        "title": "ProjectDataDeleteRequest",
        "required": ["datum_ids", "project_id"],
        "type": "object",
        "properties": {
          "datum_ids": {
            "title": "Datum Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "The datum ids to delete"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "ProjectDataUpdateRequest": {
        "title": "ProjectDataUpdateRequest",
        "required": ["datums", "project_id"],
        "type": "object",
        "properties": {
          "datums": {
            "title": "Datums",
            "type": "array",
            "items": { "type": "object" },
            "description": "The datums to update"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "ProjectGalleryResponse": {
        "title": "ProjectGalleryResponse",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMetadataBaseModel"
            },
            "description": "A list of projects in the gallery",
            "default": []
          }
        }
      },
      "ProjectIdName": {
        "title": "ProjectIdName",
        "required": ["id", "project_name", "slug"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Id of the project",
            "format": "uuid"
          },
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "Name of the project"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The project url-safe slug"
          }
        }
      },
      "ProjectMetadataBaseModel": {
        "title": "ProjectMetadataBaseModel",
        "required": [
          "id",
          "owner",
          "project_name",
          "creator",
          "description",
          "is_public",
          "project_fields",
          "unique_id_field",
          "total_datums_in_project",
          "created_timestamp",
          "nickname",
          "thumbnail",
          "slug"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Project ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The organization ID that owns this project",
            "format": "uuid",
            "example": "43adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "The name of this project",
            "example": "example_project"
          },
          "creator": {
            "title": "Creator",
            "type": "string",
            "description": "The user id who created this project."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description for this project."
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean",
            "description": "Is the project viewable without being in the organization?"
          },
          "project_fields": {
            "title": "Project Fields",
            "type": "array",
            "items": { "type": "string" },
            "description": "The list of fields a datum in the project may contain."
          },
          "unique_id_field": {
            "title": "Unique Id Field",
            "type": "string",
            "description": "The field that contains a unique id for each document."
          },
          "modality": {
            "title": "Modality",
            "type": "string",
            "description": "The project modality"
          },
          "total_datums_in_project": {
            "title": "Total Datums In Project",
            "type": "integer",
            "description": "Total datums in project."
          },
          "created_timestamp": {
            "title": "Created Timestamp",
            "type": "string",
            "description": "The timestamp this project was created.",
            "format": "date-time"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "The nickname who created this project."
          },
          "thumbnail": {
            "title": "Thumbnail",
            "type": "string",
            "description": "The project display thumbnail."
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The project url-safe slug"
          }
        }
      },
      "ProjectNameSearchRequest": {
        "title": "ProjectNameSearchRequest",
        "required": ["project_name"],
        "type": "object",
        "properties": {
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "The name of your project"
          },
          "organization_name": {
            "title": "Organization Name",
            "type": "string",
            "description": "The organization with-in which you are searching."
          }
        }
      },
      "ProjectNameSearchResponse": {
        "title": "ProjectNameSearchResponse",
        "required": ["results"],
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectSearchItem" },
            "description": "A list of projects matching your search query."
          }
        }
      },
      "ProjectPendingInvitationsRequest": {
        "title": "ProjectPendingInvitationsRequest",
        "required": ["project_id", "organization_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Project id to get pending invitations for",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization id to check permissions",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "ProjectRolesModel": {
        "title": "ProjectRolesModel",
        "required": [
          "id",
          "user_id",
          "access_role",
          "project_id",
          "nickname",
          "owner",
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role",
            "example": "MEMBER"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "Nickname of user"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The organization ID that owns this project",
            "format": "uuid",
            "example": "43adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "picture": {
            "title": "Picture",
            "type": "string",
            "description": "The users profile image"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User email",
            "example": "nomic@gmail.com"
          }
        }
      },
      "ProjectSearchItem": {
        "title": "ProjectSearchItem",
        "required": ["id", "owner", "project_name", "creator", "description"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Project ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The nickname of the organization that owns this project.",
            "example": "43adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_name": {
            "title": "Project Name",
            "type": "string",
            "description": "The name of this project",
            "example": "example_project"
          },
          "creator": {
            "title": "Creator",
            "type": "string",
            "description": "The nickname of the user who created this project."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description for this project."
          }
        }
      },
      "Projection": {
        "title": "Projection",
        "required": [
          "id",
          "projection_name",
          "ready",
          "hyperparameters",
          "atom_strategies",
          "created_timestamp",
          "updated_timestamp"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Projection ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "projection_name": {
            "title": "Projection Name",
            "type": "string",
            "description": "The type of projection"
          },
          "ready": {
            "title": "Ready",
            "type": "boolean",
            "description": "Is this projection ready?"
          },
          "hyperparameters": {
            "title": "Hyperparameters",
            "type": "object",
            "description": "The hyperparameters of this projection."
          },
          "atom_strategies": {
            "title": "Atom Strategies",
            "type": "array",
            "items": { "type": "string" },
            "description": "The phrase strategies of the phrases this embedder is embedding."
          },
          "created_timestamp": {
            "title": "Created Timestamp",
            "type": "string",
            "description": "The timestamp this projection was created.",
            "format": "date-time"
          },
          "updated_timestamp": {
            "title": "Updated Timestamp",
            "type": "string",
            "description": "The timestamp this projection was updated.",
            "format": "date-time"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "type": "string",
            "description": "The thumbnail of this projection.",
            "default": ""
          },
          "og_image": {
            "title": "Og Image",
            "type": "string",
            "description": "The og image of this projection.",
            "default": ""
          }
        }
      },
      "ProjectionAliasResponse": {
        "title": "ProjectionAliasResponse",
        "required": ["project_id", "projection_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The project id",
            "format": "uuid",
            "example": "df4dcf85-84ed-4e3a-9519-17c72682f905"
          },
          "projection_id": {
            "title": "Projection Id",
            "type": "string",
            "description": "The projection id",
            "format": "uuid",
            "example": "The projection id"
          }
        }
      },
      "ProjectionResponse": {
        "title": "ProjectionResponse",
        "required": ["topic_models", "topic_model_metadatas"],
        "type": "object",
        "properties": {
          "topic_models": {
            "title": "Topic Models",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeatureCollection" },
            "description": "List of topic model geojsons"
          },
          "topic_model_metadatas": {
            "title": "Topic Model Metadatas",
            "type": "array",
            "items": { "type": "object" },
            "description": "list of topic model metadata"
          }
        }
      },
      "ProjectsResponse": {
        "title": "ProjectsResponse",
        "required": ["projects"],
        "type": "object",
        "properties": {
          "projects": {
            "title": "Projects",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectIdName" },
            "description": "All projects for user"
          }
        }
      },
      "PublicOrganizationMembershipWithPicture": {
        "title": "PublicOrganizationMembershipWithPicture",
        "required": ["organization_id", "nickname"],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "Organization name",
            "example": "MyOrganization"
          },
          "picture": {
            "title": "Picture",
            "type": "string",
            "description": "The users profile image"
          }
        }
      },
      "PublicOrganizationResponse": {
        "title": "PublicOrganizationResponse",
        "required": [
          "id",
          "nickname",
          "plan_type",
          "time_created",
          "members",
          "projects",
          "slug",
          "organization_type",
          "linked_user_account_id",
          "public_organization"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "The organization nickname",
            "example": "nomicai"
          },
          "plan_type": {
            "title": "Plan Type",
            "type": "string",
            "description": "The plan type this organization is on."
          },
          "time_created": {
            "title": "Time Created",
            "type": "string",
            "description": "When this organizations was created.",
            "format": "date-time"
          },
          "members": {
            "title": "Members",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicOrganizationMembershipWithPicture"
            },
            "description": "All of the organization members with access roles."
          },
          "projects": {
            "title": "Projects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMetadataBaseModel"
            },
            "description": "All of the organizations projects the requested user can access"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "The organization url-safe slug"
          },
          "organization_type": {
            "title": "Organization Type",
            "type": "string",
            "description": "The type of organization: personal, company and academic"
          },
          "linked_user_account_id": {
            "title": "Linked User Account Id",
            "type": "string",
            "description": "The user id of the linked account Atlas account to this organization. Null if there is no linked account.",
            "example": "auth0|12345678"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Access role of user for this organization",
            "default": "VIEWER"
          },
          "public_organization": {
            "title": "Public Organization",
            "type": "boolean",
            "description": "Is the organization public?"
          },
          "description": {
            "title": "Description",
            "maxLength": 512,
            "type": "string",
            "description": "A description for this organization."
          },
          "logo_url": {
            "title": "Logo Url",
            "maxLength": 512,
            "type": "string",
            "description": "The url of the organization logo."
          },
          "website": {
            "title": "Website",
            "maxLength": 255,
            "type": "string",
            "description": "The url of the organization website."
          }
        }
      },
      "RemoveIndexRequest": {
        "title": "RemoveIndexRequest",
        "required": ["project_id", "index_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The project id containing the index you are removing.",
            "format": "uuid"
          },
          "index_id": {
            "title": "Index Id",
            "type": "string",
            "description": "ID of index to remove",
            "format": "uuid"
          }
        }
      },
      "RemoveProjectRequest": {
        "title": "RemoveProjectRequest",
        "required": ["project_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The ID of the project to remove.",
            "format": "uuid",
            "example": "example-project"
          }
        }
      },
      "RemoveUserFromProjectRequest": {
        "title": "RemoveUserFromProjectRequest",
        "required": ["user_id", "organization_id", "project_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Unique organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Unique project id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "RemoveUserRequest": {
        "title": "RemoveUserRequest",
        "required": ["user_id", "organization_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Unique user id",
            "example": "auth0|12345678"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Unique organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "SearchUserModel": {
        "title": "SearchUserModel",
        "required": ["nickname", "id"],
        "type": "object",
        "properties": {
          "nickname": {
            "title": "Nickname",
            "type": "string",
            "description": "Nickname of user"
          },
          "id": { "title": "Id", "type": "string", "description": "User id" }
        }
      },
      "SearchUserProjectRequest": {
        "title": "SearchUserProjectRequest",
        "required": ["search_word", "organization_id", "project_id"],
        "type": "object",
        "properties": {
          "search_word": {
            "title": "Search Word",
            "type": "string",
            "description": "Search word to find user"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Inviter project id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "SearchUserRequest": {
        "title": "SearchUserRequest",
        "required": ["search_word", "organization_id"],
        "type": "object",
        "properties": {
          "search_word": {
            "title": "Search Word",
            "type": "string",
            "description": "Search word to find user"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "SearchUserResponse": {
        "title": "SearchUserResponse",
        "required": ["users"],
        "type": "object",
        "properties": {
          "users": {
            "title": "Users",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SearchUserModel" },
            "description": "Users list"
          }
        }
      },
      "SetOrganizationLimitsRequest": {
        "title": "SetOrganizationLimitsRequest",
        "required": ["max_datums", "organization_id"],
        "type": "object",
        "properties": {
          "max_datums": {
            "title": "Max Datums",
            "type": "integer",
            "description": "The datapoint usage limit to set for the organization"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "SetOrganizationLimitsResponse": {
        "title": "SetOrganizationLimitsResponse",
        "required": ["max_datums"],
        "type": "object",
        "properties": {
          "max_datums": {
            "title": "Max Datums",
            "type": "integer",
            "description": "The new datapoint usage limit"
          }
        }
      },
      "StripeSubscriptionCreateRequest": {
        "title": "StripeSubscriptionCreateRequest",
        "required": ["organization_id"],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "StripeSubscriptionCreateResponse": {
        "title": "StripeSubscriptionCreateResponse",
        "required": ["subscription_id", "client_secret"],
        "type": "object",
        "properties": {
          "subscription_id": {
            "title": "Subscription Id",
            "type": "string",
            "description": "The ID of the subscription"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string",
            "description": "The stripe client secret for the payment entering session"
          }
        }
      },
      "SuccessResponse": {
        "title": "SuccessResponse",
        "type": "object",
        "properties": {
          "result": { "title": "Result", "type": "string", "default": "ok" }
        }
      },
      "TagRequest": {
        "title": "TagRequest",
        "required": [
          "project_id",
          "projection_id",
          "tag_name",
          "tag_definition_id",
          "dsl_rule"
        ],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Project id"
          },
          "projection_id": {
            "title": "Projection Id",
            "type": "string",
            "description": "Projection id"
          },
          "tag_name": {
            "title": "Tag Name",
            "type": "string",
            "description": "Name of tag"
          },
          "tag_definition_id": {
            "title": "Tag Definition Id",
            "type": "string",
            "description": "Hashed id for tag definition"
          },
          "dsl_rule": {
            "title": "Dsl Rule",
            "type": "string",
            "description": "DSL rule to generate tag mask"
          }
        }
      },
      "TagResponse": {
        "title": "TagResponse",
        "required": ["tag_id", "tag_definition_id"],
        "type": "object",
        "properties": {
          "tag_id": {
            "title": "Tag Id",
            "type": "string",
            "desscription": "Tag id"
          },
          "tag_definition_id": {
            "title": "Tag Definition Id",
            "type": "string",
            "description": "Hashed id of tag definition"
          },
          "tag_name": {
            "title": "Tag Name",
            "type": "string",
            "description": "Name of tag"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "Tag creator nickname"
          },
          "dsl_rule": {
            "title": "Dsl Rule",
            "type": "string",
            "description": "DSL rule json"
          }
        }
      },
      "TagStatus": {
        "title": "TagStatus",
        "required": ["is_complete"],
        "type": "object",
        "properties": {
          "is_complete": {
            "title": "Is Complete",
            "type": "boolean",
            "description": "Is tag applied to all tiles"
          }
        }
      },
      "TagWithIdRequest": {
        "title": "TagWithIdRequest",
        "required": ["project_id", "tag_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Project ID"
          },
          "tag_id": {
            "title": "Tag Id",
            "type": "string",
            "description": "Tag id"
          },
          "tag_name": {
            "title": "Tag Name",
            "type": "string",
            "description": "Name of tag"
          },
          "tag_definition_id": {
            "title": "Tag Definition Id",
            "type": "string",
            "description": "Hashed id for tag definition"
          },
          "dsl_rule": {
            "title": "Dsl Rule",
            "type": "string",
            "description": "DSL rule to generate tag mask"
          }
        }
      },
      "TextEmbeddingInferenceRequest": {
        "title": "TextEmbeddingInferenceRequest",
        "required": ["texts"],
        "type": "object",
        "properties": {
          "texts": {
            "title": "Texts",
            "type": "array",
            "items": { "type": "string" },
            "description": "A batch of text you want embedded."
          },
          "model": {
            "allOf": [
              { "$ref": "#/components/schemas/NomicTextEmbeddingModel" }
            ],
            "description": "The model to use when embedding.",
            "default": "nomic-embed-text-v1"
          },
          "task_type": {
            "title": "Task Type",
            "type": "string",
            "description": "The downstream task to generate embeddings for, model-specific."
          },
          "long_text_mode": {
            "allOf": [{ "$ref": "#/components/schemas/LongTextHandlingMode" }],
            "description": "How to handle text longer than the model can accept.",
            "default": "mean"
          },
          "max_tokens_per_text": {
            "title": "Max Tokens Per Text",
            "type": "integer",
            "description": "Maximum amount of tokens per text. Defaults to 8192 if `long_text_mode` is \"mean\", or the maximum model input size if `long_text_mode` is \"truncate\".",
            "default": 8192
          },
          "dimensionality": {
            "title": "Dimensionality",
            "type": "integer",
            "description": "Requested embedding dimensionality, defaults to full-size for requested model"
          }
        }
      },
      "TextEmbeddingInferenceResponse": {
        "title": "TextEmbeddingInferenceResponse",
        "required": ["embeddings", "usage", "model"],
        "type": "object",
        "properties": {
          "embeddings": {
            "title": "Embeddings",
            "type": "array",
            "items": { "type": "array", "items": { "type": "number" } },
            "description": "The embeddings"
          },
          "usage": {
            "title": "Usage",
            "allOf": [{ "$ref": "#/components/schemas/EmbeddingUsageModel" }],
            "description": "The embedding usage"
          },
          "model": {
            "allOf": [
              { "$ref": "#/components/schemas/NomicTextEmbeddingModel" }
            ],
            "description": "The model used to produce the embeddings."
          }
        }
      },
      "TopicDensityRequest": {
        "title": "TopicDensityRequest",
        "required": ["start", "end", "time_field"],
        "type": "object",
        "properties": {
          "start": {
            "title": "Start",
            "type": "string",
            "description": "The datetime of window start",
            "format": "date-time"
          },
          "end": {
            "title": "End",
            "type": "string",
            "description": "The datetime of window end",
            "format": "date-time"
          },
          "time_field": {
            "title": "Time Field",
            "type": "string",
            "description": "The time field to window against"
          }
        }
      },
      "TopicDensityResponse": {
        "title": "TopicDensityResponse",
        "required": ["results"],
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": { "type": "object" },
            "description": "A list of topic metadata, including movement information"
          }
        }
      },
      "UpdateInviteRequest": {
        "title": "UpdateInviteRequest",
        "required": [
          "invitation_id",
          "is_accepted",
          "access_role",
          "organization_id"
        ],
        "type": "object",
        "properties": {
          "invitation_id": {
            "title": "Invitation Id",
            "type": "string",
            "description": "Invitation id",
            "example": "auth0|12345678"
          },
          "is_accepted": {
            "title": "Is Accepted",
            "type": "boolean",
            "description": "Is invitation accepted?"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role to set",
            "example": "MEMBER"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Inviter organization id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "UpdateOrganizationRequest": {
        "title": "UpdateOrganizationRequest",
        "required": ["organization_id"],
        "type": "object",
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "string",
            "description": "Organization ID",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          },
          "new_organization_nickname": {
            "title": "New Organization Nickname",
            "type": "string",
            "description": "The new nickname for the organization."
          },
          "new_organization_type": {
            "title": "New Organization Type",
            "type": "string",
            "description": "The new organization type"
          },
          "new_organization_slug": {
            "title": "New Organization Slug",
            "type": "string",
            "description": "A new organization slug"
          },
          "new_organization_description": {
            "title": "New Organization Description",
            "maxLength": 512,
            "type": "string",
            "description": "A new description for the organization."
          },
          "new_organization_logo_url": {
            "title": "New Organization Logo Url",
            "maxLength": 512,
            "type": "string",
            "description": "A new logo for the organization."
          },
          "new_organization_website": {
            "title": "New Organization Website",
            "maxLength": 255,
            "type": "string",
            "description": "A new website for the organization."
          }
        }
      },
      "UpdateProjectIndicesRequest": {
        "title": "UpdateProjectIndicesRequest",
        "required": ["project_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "The id of the project to update",
            "format": "uuid"
          },
          "rebuild_topic_models": {
            "title": "Rebuild Topic Models",
            "type": "boolean",
            "description": "Whether or not to rebuild topic models",
            "default": false
          }
        }
      },
      "UpdateProjectIndicesResponse": {
        "title": "UpdateProjectIndicesResponse",
        "required": ["job_ids"],
        "type": "object",
        "properties": {
          "job_ids": {
            "title": "Job Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "The job ids cerated for each index update operation"
          }
        }
      },
      "UpdateProjectInviteRequest": {
        "title": "UpdateProjectInviteRequest",
        "required": ["is_accepted", "access_role", "project_id"],
        "type": "object",
        "properties": {
          "is_accepted": {
            "title": "Is Accepted",
            "type": "boolean",
            "description": "Is invitation accepted?"
          },
          "access_role": {
            "title": "Access Role",
            "type": "string",
            "description": "Role to set",
            "example": "MEMBER"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Inviter project id",
            "format": "uuid",
            "example": "33adcf85-84ed-4e3a-9519-17c72682f905"
          }
        }
      },
      "UpdateTagDefinitionRequest": {
        "title": "UpdateTagDefinitionRequest",
        "required": ["tag_id", "tag_definition_id"],
        "type": "object",
        "properties": {
          "tag_id": {
            "title": "Tag Id",
            "type": "string",
            "description": "Tag id"
          },
          "tag_definition_id": {
            "title": "Tag Definition Id",
            "type": "string",
            "description": "New tag definition id"
          },
          "dsl_rule": {
            "title": "Dsl Rule",
            "type": "string",
            "description": "DSL rule to generate tag mask"
          }
        }
      },
      "UpdateTagNameRequest": {
        "title": "UpdateTagNameRequest",
        "required": ["tag_id", "tag_name"],
        "type": "object",
        "properties": {
          "tag_id": {
            "title": "Tag Id",
            "type": "string",
            "description": "Tag id"
          },
          "tag_name": {
            "title": "Tag Name",
            "type": "string",
            "description": "New name of tag"
          }
        }
      },
      "UpdateTopicModelRequest": {
        "title": "UpdateTopicModelRequest",
        "required": ["project_id", "topic_geojson"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "description": "Project id"
          },
          "topic_geojson": {
            "title": "Topic Geojson",
            "allOf": [{ "$ref": "#/components/schemas/FeatureCollection" }],
            "description": "Topic model geojson to replace existing topic model"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
          },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        }
      }
    },
    "securitySchemes": {
      "Auth0ImplicitBearer": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "scopes": {},
            "authorizationUrl": "https://nomicai.us.auth0.com/authorize?audience=AtlasAPI"
          }
        }
      },
      "Auth0HTTPBearer": { "type": "http", "scheme": "bearer" },
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": { "password": { "scopes": {}, "tokenUrl": "token" } }
      }
    }
  }
}
